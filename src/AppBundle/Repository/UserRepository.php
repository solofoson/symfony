<?php

namespace AppBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    public function getDateSuppression($username_email)
    {
        $qBd = $this->createQueryBuilder("u")
                ->select('u.dateSuppression')
                ->where('u.email = :user_email OR u.username = :user_email')
                ->setParameter('user_email', $username_email);
        $qry = $qBd->getQuery();

        return $qry->getResult();
    }

    public function findByRole($role)
    {
        $qBuild = $this->createQueryBuilder("u")
                ->where('u.roles LIKE :role')
                ->setParameter('role', "%". $role ."%")
                ->andWhere("u.dateSuppression IS NULL");
        $qry = $qBuild->getQuery();

        return $qry->getResult();
    }

    public function findByRoleAndName($mot, $role)
    {
        $droitAdresse = 'droitLivraison';
        if ($role == 'collecte') {
            $droitAdresse = 'droitCollecte';
        }
        $qBuild = $this->createQueryBuilder("u")
                ->select('u.id, u.nom, u.prenom, u.email')
                ->innerJoin('u.profil', 'p')
                ->where('u.nom LIKE :mot OR u.prenom LIKE :mot OR u.email LIKE :mot')
                ->andWhere('p.'.$droitAdresse.' = 1')
                ->andWhere('p.isAdmin = 0 OR p.isAdmin is null')
                ->setParameters(array('mot' => '%'.$mot.'%'))
                ->andWhere("u.dateSuppression IS NULL")

                ->setMaxResults(20);

        return $qBuild->getQuery()->getResult();
    }

    public function findAllUsers()
    {
        $qbd = $this->createQueryBuilder('u')
                    ->where("u.dateSuppression IS NULL")
//                    ->andWhere("'ROLE_SUPER_ADMIN' in u.roles")
                    ->addOrderBy("u.dateCreation", "ASC");

        return $qbd->getQuery()->getResult();
    }

    public function findByEmailActif($email)
    {
        $qBuild = $this->createQueryBuilder("u")
                ->where('u.email = :email')
                ->setParameter('email', $email)
                ->andWhere("u.dateSuppression IS NULL")
                ->andWhere("u.enabled = 1")
                ->setMaxResults(1);
        $qry = $qBuild->getQuery();

        return $qry->getResult();
    }

    public function findByEmailOnModif($email, $idi)
    {
        $qBuild = $this->createQueryBuilder("u")
                ->where('u.email = :email')
                ->setParameter('email', $email)
                ->andWhere('u.id <> :id')
                ->setParameter('id', $idi)
                ->andWhere("u.dateSuppression IS NULL")
                ->andWhere("u.enabled = 1");
        $qry = $qBuild->getQuery();

        return $qry->getResult();
    }

    /*
     * Met à jour du role des utilisateurs liés au profil modifié
     */
    public function majUserByProfil($profil, $role)
    {
        $roleUser = $this->constituerRolesUser($role);
        $qBuild = $this->createQueryBuilder("u")
                ->update()
                ->set('u.roles', '?1')
                ->where('u.profil = :profil')
                ->setParameter('profil', $profil)
                ->setParameter(1, $roleUser);
        $qry = $qBuild->getQuery();

        return $qry->getResult();
    }

    /*
     * Former la valeur de type array du role utilisateur
     * Exemple a:1:{i:0;s:12:"ROLE_MAGASIN";}
     * a: le nombre de role à ajouter
     * i: la clé dans l'array
     * s: la longueur (nb de caractères) du role
     */
    public function constituerRolesUser($role)
    {
        $length = strlen($role);
        $text = 'a:1:{i:0;s:'.$length.':"'.$role.'";}';
        return $text;
    }

    public function findUserDroitAdresse($user = null)
    {
        $qBuild = $this->createQueryBuilder("u")
                ->select('u.id, u.nom, u.prenom, u.email')
                ->innerJoin('u.profil', 'p')
                ->where('p.droitCollecte = 1')
                ->andWhere("u.dateSuppression IS NULL");
        if ($user) {
            $qBuild->where('u.id = :user')
                   ->setParameter('user', $user->getId())
                   ->andWhere('p.isAdmin = 0 OR p.isAdmin is null');
        }
        return $qBuild->getQuery()->getResult();
    }

    public function findUser($motClef = null)
    {
        $qBuild = $this->createQueryBuilder("u")
                ->where('u.nom like :motclef or u.prenom like :motclef or u.email like :motclef')
                ->setParameter('motclef', "%" . $motClef ."%")
                ->andWhere("u.dateSuppression IS NULL")
                ->andWhere("u.enabled = 1");
        return $qBuild->getQuery()->getResult();
    }

    /* function findClient($motClef = null)
    {
        $qBuild = $this->createQueryBuilder("u")
                ->innerJoin('u.profil', 'p')
                ->where('p.droitLivraison = 1')
                ->andwhere('u.nom like :motclef or u.prenom like :motclef or u.email like :motclef')
                ->setParameter('motclef', "%" . $motClef ."%")
                ->andWhere("u.dateSuppression IS NULL")
                ->andWhere("u.enabled = 1");
        return $qBuild->getQuery()->getResult();
    }*/

    public function findMagasin($motClef = null)
    {
        $qBuild = $this->createQueryBuilder("u")
                ->innerJoin('u.profil', 'p')
                ->where('p.droitCollecte = 1')
                ->andWhere("u.dateSuppression IS NULL")
                ->andWhere("u.enabled = 1");
        if ($motClef != 0) {
            $qBuild->andwhere('u.nom like :motclef or u.prenom like :motclef or u.email like :motclef')
                   ->setParameter('motclef', "%" . $motClef ."%");
        }
        return $qBuild->getQuery()->getResult();
    }
    
    public function findClientNewAddresse($user = null)
    {
        $qbd = $this->createQueryBuilder('u')
            ->Select('u.id, u.nom, u.prenom, u.email')
            ->innerJoin('u.profil', 'p')
            ->where('p.droitLivraison = 1')
            ->andWhere('p.isAdmin != 1')
            ->andWhere('u.dateSuppression IS NULL');
        if ($user) {
            $qbd->andWhere('u.createur = :user')
                ->setParameter('user', $user);
        }
        return $qbd->getQuery()->getArrayResult();
    }
    
    public function findUserRecent($username)
    {
        $qbd = $this->createQueryBuilder('u')
            ->select('u.username')
            ->where('u.username like :username')
            ->setParameter('username', $username ."%")
            ->andWhere('u.dateSuppression IS NULL')
            ->orderBy('u.dateCreation', 'DESC');
        
        return array_column($qbd->getQuery()->getScalarResult(), 'username');
    }
    
    public function findAdmin()
    {
        $qbd = $this->createQueryBuilder('u')
            ->select('u.email')
            ->innerJoin('u.profil', 'p')
            ->where("p.droit = :role")
            ->andWhere("u.dateSuppression IS NULL")
            ->andWhere("u.email IS NOT NULL")
            ->setParameter('role', 'ROLE_ADMIN');
        return array_column($qbd->getQuery()->getScalarResult(), 'email');
    }
    
    public function findUserProfil($profils = array(), $motClef = null)
    {
        $qbd = $this->createQueryBuilder('u')
            ->innerJoin('u.profil', 'p')
            ->where('p IN (:profils)')
            ->andWhere('u.nom like :motclef or u.prenom like :motclef or u.email like :motclef')
            ->setParameter('motclef', "%" . $motClef ."%")
            ->andWhere('u.dateSuppression IS NULL')
            ->setParameter('profils', $profils);
        return $qbd->getQuery()->getResult();
    }
}
